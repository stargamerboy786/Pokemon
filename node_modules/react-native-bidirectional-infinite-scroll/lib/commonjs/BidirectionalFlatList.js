"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BidirectionalFlatList = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _flatListMvcp = require("@stream-io/flat-list-mvcp");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const styles = _reactNative.StyleSheet.create({
  indicatorContainer: {
    paddingVertical: 5,
    width: '100%'
  }
});

/**
 * Note:
 * - `onEndReached` and `onStartReached` must return a promise.
 * - `onEndReached` and `onStartReached` only get called once, per content length.
 * - maintainVisibleContentPosition is fixed, and can't be modified through props.
 * - doesn't accept `ListFooterComponent` via prop, since it is occupied by `FooterLoadingIndicator`.
 *    Set `showDefaultLoadingIndicators` to use `ListFooterComponent`.
 * - doesn't accept `ListHeaderComponent` via prop, since it is occupied by `HeaderLoadingIndicator`
 *    Set `showDefaultLoadingIndicators` to use `ListHeaderComponent`.
 */
const BidirectionalFlatList = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    activityIndicatorColor = 'black',
    autoscrollToTopThreshold = 100,
    data,
    enableAutoscrollToTop,
    FooterLoadingIndicator,
    HeaderLoadingIndicator,
    ListHeaderComponent,
    ListFooterComponent,
    onEndReached = () => Promise.resolve(),
    onEndReachedThreshold = 10,
    onScroll,
    onStartReached = () => Promise.resolve(),
    onStartReachedThreshold = 10,
    showDefaultLoadingIndicators = true
  } = props;
  const [onStartReachedInProgress, setOnStartReachedInProgress] = (0, _react.useState)(false);
  const [onEndReachedInProgress, setOnEndReachedInProgress] = (0, _react.useState)(false);
  const onStartReachedTracker = (0, _react.useRef)({});
  const onEndReachedTracker = (0, _react.useRef)({});
  const onStartReachedInPromise = (0, _react.useRef)(null);
  const onEndReachedInPromise = (0, _react.useRef)(null);

  const maybeCallOnStartReached = () => {
    // If onStartReached has already been called for given data length, then ignore.
    if (data !== null && data !== void 0 && data.length && onStartReachedTracker.current[data.length]) {
      return;
    }

    if (data !== null && data !== void 0 && data.length) {
      onStartReachedTracker.current[data.length] = true;
    }

    setOnStartReachedInProgress(true);

    const p = () => {
      return new Promise(resolve => {
        onStartReachedInPromise.current = null;
        setOnStartReachedInProgress(false);
        resolve();
      });
    };

    if (onEndReachedInPromise.current) {
      onEndReachedInPromise.current.finally(() => {
        onStartReachedInPromise.current = onStartReached().then(p);
      });
    } else {
      onStartReachedInPromise.current = onStartReached().then(p);
    }
  };

  const maybeCallOnEndReached = () => {
    // If onEndReached has already been called for given data length, then ignore.
    if (data !== null && data !== void 0 && data.length && onEndReachedTracker.current[data.length]) {
      return;
    }

    if (data !== null && data !== void 0 && data.length) {
      onEndReachedTracker.current[data.length] = true;
    }

    setOnEndReachedInProgress(true);

    const p = () => {
      return new Promise(resolve => {
        onStartReachedInPromise.current = null;
        setOnEndReachedInProgress(false);
        resolve();
      });
    };

    if (onStartReachedInPromise.current) {
      onStartReachedInPromise.current.finally(() => {
        onEndReachedInPromise.current = onEndReached().then(p);
      });
    } else {
      onEndReachedInPromise.current = onEndReached().then(p);
    }
  };

  const handleScroll = event => {
    // Call the parent onScroll handler, if provided.
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(event);
    const offset = event.nativeEvent.contentOffset.y;
    const visibleLength = event.nativeEvent.layoutMeasurement.height;
    const contentLength = event.nativeEvent.contentSize.height; // Check if scroll has reached either start of end of list.

    const isScrollAtStart = offset < onStartReachedThreshold;
    const isScrollAtEnd = contentLength - visibleLength - offset < onEndReachedThreshold;

    if (isScrollAtStart) {
      maybeCallOnStartReached();
    }

    if (isScrollAtEnd) {
      maybeCallOnEndReached();
    }
  };

  const renderHeaderLoadingIndicator = () => {
    if (!showDefaultLoadingIndicators) {
      if (ListHeaderComponent) {
        return /*#__PURE__*/_react.default.createElement(ListHeaderComponent, null);
      } else {
        return null;
      }
    }

    if (!onStartReachedInProgress) return null;

    if (HeaderLoadingIndicator) {
      return /*#__PURE__*/_react.default.createElement(HeaderLoadingIndicator, null);
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.indicatorContainer
    }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
      size: 'small',
      color: activityIndicatorColor
    }));
  };

  const renderFooterLoadingIndicator = () => {
    if (!showDefaultLoadingIndicators) {
      if (ListFooterComponent) {
        return /*#__PURE__*/_react.default.createElement(ListFooterComponent, null);
      } else {
        return null;
      }
    }

    if (!onEndReachedInProgress) return null;

    if (FooterLoadingIndicator) {
      return /*#__PURE__*/_react.default.createElement(FooterLoadingIndicator, null);
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.indicatorContainer
    }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
      size: 'small',
      color: activityIndicatorColor
    }));
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_flatListMvcp.FlatList, _extends({}, props, {
    ref: ref,
    progressViewOffset: 50,
    ListHeaderComponent: renderHeaderLoadingIndicator,
    ListFooterComponent: renderFooterLoadingIndicator,
    onEndReached: null,
    onScroll: handleScroll,
    maintainVisibleContentPosition: {
      autoscrollToTopThreshold: enableAutoscrollToTop ? autoscrollToTopThreshold : undefined,
      minIndexForVisible: 1
    }
  })));
});

exports.BidirectionalFlatList = BidirectionalFlatList;
//# sourceMappingURL=BidirectionalFlatList.js.map